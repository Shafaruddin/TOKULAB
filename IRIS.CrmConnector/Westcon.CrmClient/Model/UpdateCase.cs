/* 
 * SPPL SVCS API 1.0 - Modified by Sache
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Westcon.CrmClient.Model;

namespace IO.Swagger.CrmClient.Model
{
    /// <summary>
    /// UpdateCase
    /// </summary>
    [DataContract]
    public partial class UpdateCase : IEquatable<UpdateCase>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ContactMode
        /// </summary>
        [DataMember(Name = "ContactMode", EmitDefaultValue = false)]
        public ContactModeEnum ContactMode { get; set; }

        /// <summary>
        /// Gets or Sets CaseStatus
        /// </summary>
        [DataMember(Name = "CaseStatus", EmitDefaultValue = false)]
        public CaseStatusEnum CaseStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCase" /> class.
        /// </summary>
        /// <param name="caseID">caseID (required).</param>
        /// <param name="customerGUID">customerGUID (required).</param>
        /// <param name="caseTitle">caseTitle (required).</param>
        /// <param name="caseDetails">caseDetails (required).</param>
        /// <param name="systemAuthenticated">systemAuthenticated (required).</param>
        /// <param name="manualVerification">manualVerification (required).</param>
        /// <param name="iPCCCallExtensionID">iPCCCallExtensionID (required).</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="caseCategory1">caseCategory1 (required).</param>
        /// <param name="caseCategory2">caseCategory2 (required).</param>
        /// <param name="caseCategory3">caseCategory3 (required).</param>
        /// <param name="adHocCriteria">adHocCriteria (required).</param>
        /// <param name="followupAction">followupAction (required).</param>
        /// <param name="contactMode">contactMode (required).</param>
        /// <param name="modifiedBy">modifiedBy (required).</param>
        /// <param name="followupRequired">followupRequired (required).</param>
        /// <param name="caseStatus">caseStatus (required).</param>
        /// <param name="resolution">resolution (required).</param>
        /// <param name="triggeredFrom">triggeredFrom (required).</param>
        /// <param name="triggeredBy">triggeredBy (required).</param>
        public UpdateCase(string caseID = default(string), Guid? customerGUID = default(Guid?), string caseTitle = default(string), string caseDetails = default(string), bool? systemAuthenticated = default(bool?), bool? manualVerification = default(bool?), Guid? iPCCCallExtensionID = default(Guid?), string owner = default(string), Guid? caseCategory1 = default(Guid?), Guid? caseCategory2 = default(Guid?), Guid? caseCategory3 = default(Guid?), Guid? adHocCriteria = default(Guid?), string followupAction = default(string), ContactModeEnum contactMode = default(ContactModeEnum), string modifiedBy = default(string), bool? followupRequired = default(bool?), CaseStatusEnum caseStatus = default(CaseStatusEnum), string? resolution = default(string), string triggeredFrom = default(string), string triggeredBy = default(string))
        {
            // to ensure "caseID" is required (not null)
            if (caseID == null)
            {
                throw new InvalidDataException("caseID is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.CaseID = caseID;
            }
            // to ensure "customerGUID" is required (not null)
            if (customerGUID == null)
            {
                throw new InvalidDataException("customerGUID is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.CustomerGUID = customerGUID;
            }
            // to ensure "caseTitle" is required (not null)
            if (caseTitle == null)
            {
                throw new InvalidDataException("caseTitle is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.CaseTitle = caseTitle;
            }
            // to ensure "caseDetails" is required (not null)
            if (caseDetails == null)
            {
                throw new InvalidDataException("caseDetails is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.CaseDetails = caseDetails;
            }
            // to ensure "systemAuthenticated" is required (not null)
            if (systemAuthenticated == null)
            {
                throw new InvalidDataException("systemAuthenticated is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.SystemAuthenticated = systemAuthenticated;
            }
            // to ensure "manualVerification" is required (not null)
            if (manualVerification == null)
            {
                throw new InvalidDataException("manualVerification is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.ManualVerification = manualVerification;
            }
            // to ensure "iPCCCallExtensionID" is required (not null)
            if (iPCCCallExtensionID == null)
            {
                throw new InvalidDataException("iPCCCallExtensionID is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.IPCCCallExtensionID = iPCCCallExtensionID;
            }
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new InvalidDataException("owner is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.Owner = owner;
            }
            // to ensure "caseCategory1" is required (not null)
            if (caseCategory1 == null)
            {
                throw new InvalidDataException("caseCategory1 is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.CaseCategory1 = caseCategory1;
            }
            // to ensure "caseCategory2" is required (not null)
            if (caseCategory2 == null)
            {
                throw new InvalidDataException("caseCategory2 is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.CaseCategory2 = caseCategory2;
            }
            // to ensure "caseCategory3" is required (not null)
            if (caseCategory3 == null)
            {
                throw new InvalidDataException("caseCategory3 is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.CaseCategory3 = caseCategory3;
            }
            // to ensure "adHocCriteria" is required (not null)
            if (adHocCriteria == null || !adHocCriteria.HasValue)
            {
                this.AdHocCriteria = null;
                //throw new InvalidDataException("adHocCriteria is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.AdHocCriteria = adHocCriteria;
            }
            // to ensure "followupAction" is required (not null)
            if (followupAction == null)
            {
                throw new InvalidDataException("followupAction is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.FollowupAction = followupAction;
            }
            // to ensure "contactMode" is required (not null)
            if (contactMode == null || contactMode == 0)
            {
                throw new InvalidDataException("contactMode is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.ContactMode = contactMode;
            }
            // to ensure "modifiedBy" is required (not null)
            if (modifiedBy == null)
            {
                throw new InvalidDataException("modifiedBy is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.ModifiedBy = modifiedBy;
            }
            // to ensure "followupRequired" is required (not null)
            if (followupRequired == null)
            {
                this.FollowupRequired = false;
                //throw new InvalidDataException("followupRequired is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.FollowupRequired = followupRequired;
            }
            // to ensure "caseStatus" is required (not null)
            if (caseStatus == null || caseStatus == 0)
            {
                throw new InvalidDataException("caseStatus is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.CaseStatus = caseStatus;
            }
            // to ensure "resolution" is required (not null)
            if (string.IsNullOrEmpty(resolution))
            {
                this.Resolution = null;
                //throw new InvalidDataException("resolution is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.Resolution = resolution;
            }

            // to ensure "triggeredFrom" is required (not null)
            if (triggeredFrom == null)
            {
                throw new InvalidDataException("triggeredFrom is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.TriggeredFrom = triggeredFrom;
            }
            // to ensure "triggeredBy" is required (not null)
            if (triggeredBy == null)
            {
                throw new InvalidDataException("triggeredBy is a required property for UpdateCase and cannot be null");
            }
            else
            {
                this.TriggeredBy = triggeredBy;
            }
        }

        /// <summary>
        /// Gets or Sets CaseID
        /// </summary>
        [DataMember(Name = "CaseID", EmitDefaultValue = false)]
        public string CaseID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGUID
        /// </summary>
        [DataMember(Name = "CustomerGUID", EmitDefaultValue = false)]
        public Guid? CustomerGUID { get; set; }

        /// <summary>
        /// Gets or Sets CaseTitle
        /// </summary>
        [DataMember(Name = "CaseTitle", EmitDefaultValue = false)]
        public string CaseTitle { get; set; }

        /// <summary>
        /// Gets or Sets CaseDetails
        /// </summary>
        [DataMember(Name = "CaseDetails", EmitDefaultValue = false)]
        public string CaseDetails { get; set; }

        /// <summary>
        /// Gets or Sets SystemAuthenticated
        /// </summary>
        [DataMember(Name = "SystemAuthenticated", EmitDefaultValue = false)]
        public bool? SystemAuthenticated { get; set; }

        /// <summary>
        /// Gets or Sets ManualVerification
        /// </summary>
        [DataMember(Name = "ManualVerification", EmitDefaultValue = false)]
        public bool? ManualVerification { get; set; }

        /// <summary>
        /// Gets or Sets IPCCCallExtensionID
        /// </summary>
        [DataMember(Name = "IPCCCallExtensionID", EmitDefaultValue = false)]
        public Guid? IPCCCallExtensionID { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "Owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets CaseCategory1
        /// </summary>
        [DataMember(Name = "CaseCategory1", EmitDefaultValue = false)]
        public Guid? CaseCategory1 { get; set; }

        /// <summary>
        /// Gets or Sets CaseCategory2
        /// </summary>
        [DataMember(Name = "CaseCategory2", EmitDefaultValue = false)]
        public Guid? CaseCategory2 { get; set; }

        /// <summary>
        /// Gets or Sets CaseCategory3
        /// </summary>
        [DataMember(Name = "CaseCategory3", EmitDefaultValue = false)]
        public Guid? CaseCategory3 { get; set; }

        /// <summary>
        /// Gets or Sets AdHocCriteria
        /// </summary>
        [DataMember(Name = "AdHocCriteria", EmitDefaultValue = false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Include)]
        public Guid? AdHocCriteria { get; set; }

        /// <summary>
        /// Gets or Sets FollowupAction
        /// </summary>
        [DataMember(Name = "FollowupAction", EmitDefaultValue = false)]
        public string FollowupAction { get; set; }


        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name = "ModifiedBy", EmitDefaultValue = false)]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets FollowupRequired
        /// </summary>
        [DataMember(Name = "FollowupRequired", EmitDefaultValue = false)]
        public bool? FollowupRequired { get; set; }


        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name = "Resolution", EmitDefaultValue = false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Include)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets TriggeredFrom
        /// </summary>
        [DataMember(Name = "TriggeredFrom", EmitDefaultValue = false)]
        public string TriggeredFrom { get; set; }

        /// <summary>
        /// Gets or Sets TriggeredBy
        /// </summary>
        [DataMember(Name = "TriggeredBy", EmitDefaultValue = false)]
        public string TriggeredBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCase {\n");
            sb.Append("  CaseID: ").Append(CaseID).Append("\n");
            sb.Append("  CustomerGUID: ").Append(CustomerGUID).Append("\n");
            sb.Append("  CaseTitle: ").Append(CaseTitle).Append("\n");
            sb.Append("  CaseDetails: ").Append(CaseDetails).Append("\n");
            sb.Append("  SystemAuthenticated: ").Append(SystemAuthenticated).Append("\n");
            sb.Append("  ManualVerification: ").Append(ManualVerification).Append("\n");
            sb.Append("  IPCCCallExtensionID: ").Append(IPCCCallExtensionID).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  CaseCategory1: ").Append(CaseCategory1).Append("\n");
            sb.Append("  CaseCategory2: ").Append(CaseCategory2).Append("\n");
            sb.Append("  CaseCategory3: ").Append(CaseCategory3).Append("\n");
            sb.Append("  AdHocCriteria: ").Append(AdHocCriteria).Append("\n");
            sb.Append("  FollowupAction: ").Append(FollowupAction).Append("\n");
            sb.Append("  ContactMode: ").Append(ContactMode).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  FollowupRequired: ").Append(FollowupRequired).Append("\n");
            sb.Append("  CaseStatus: ").Append(CaseStatus).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  TriggeredFrom: ").Append(TriggeredFrom).Append("\n");
            sb.Append("  TriggeredBy: ").Append(TriggeredBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCase);
        }

        /// <summary>
        /// Returns true if UpdateCase instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCase input)
        {
            if (input == null)
                return false;

            return
                (
                    this.CaseID == input.CaseID ||
                    (this.CaseID != null &&
                    this.CaseID.Equals(input.CaseID))
                ) &&
                (
                    this.CustomerGUID == input.CustomerGUID ||
                    (this.CustomerGUID != null &&
                    this.CustomerGUID.Equals(input.CustomerGUID))
                ) &&
                (
                    this.CaseTitle == input.CaseTitle ||
                    (this.CaseTitle != null &&
                    this.CaseTitle.Equals(input.CaseTitle))
                ) &&
                (
                    this.CaseDetails == input.CaseDetails ||
                    (this.CaseDetails != null &&
                    this.CaseDetails.Equals(input.CaseDetails))
                ) &&
                (
                    this.SystemAuthenticated == input.SystemAuthenticated ||
                    (this.SystemAuthenticated != null &&
                    this.SystemAuthenticated.Equals(input.SystemAuthenticated))
                ) &&
                (
                    this.ManualVerification == input.ManualVerification ||
                    (this.ManualVerification != null &&
                    this.ManualVerification.Equals(input.ManualVerification))
                ) &&
                (
                    this.IPCCCallExtensionID == input.IPCCCallExtensionID ||
                    (this.IPCCCallExtensionID != null &&
                    this.IPCCCallExtensionID.Equals(input.IPCCCallExtensionID))
                ) &&
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) &&
                (
                    this.CaseCategory1 == input.CaseCategory1 ||
                    (this.CaseCategory1 != null &&
                    this.CaseCategory1.Equals(input.CaseCategory1))
                ) &&
                (
                    this.CaseCategory2 == input.CaseCategory2 ||
                    (this.CaseCategory2 != null &&
                    this.CaseCategory2.Equals(input.CaseCategory2))
                ) &&
                (
                    this.CaseCategory3 == input.CaseCategory3 ||
                    (this.CaseCategory3 != null &&
                    this.CaseCategory3.Equals(input.CaseCategory3))
                ) &&
                (
                    this.AdHocCriteria == input.AdHocCriteria ||
                    (this.AdHocCriteria != null &&
                    this.AdHocCriteria.Equals(input.AdHocCriteria))
                ) &&
                (
                    this.FollowupAction == input.FollowupAction ||
                    (this.FollowupAction != null &&
                    this.FollowupAction.Equals(input.FollowupAction))
                ) &&
                (
                    this.ContactMode == input.ContactMode ||
                    (this.ContactMode != null &&
                    this.ContactMode.Equals(input.ContactMode))
                ) &&
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    (this.ModifiedBy != null &&
                    this.ModifiedBy.Equals(input.ModifiedBy))
                ) &&
                (
                    this.FollowupRequired == input.FollowupRequired ||
                    (this.FollowupRequired != null &&
                    this.FollowupRequired.Equals(input.FollowupRequired))
                ) &&
                (
                    this.CaseStatus == input.CaseStatus ||
                    (this.CaseStatus != null &&
                    this.CaseStatus.Equals(input.CaseStatus))
                ) &&
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) &&
                (
                    this.TriggeredFrom == input.TriggeredFrom ||
                    (this.TriggeredFrom != null &&
                    this.TriggeredFrom.Equals(input.TriggeredFrom))
                ) &&
                (
                    this.TriggeredBy == input.TriggeredBy ||
                    (this.TriggeredBy != null &&
                    this.TriggeredBy.Equals(input.TriggeredBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CaseID != null)
                    hashCode = hashCode * 59 + this.CaseID.GetHashCode();
                if (this.CustomerGUID != null)
                    hashCode = hashCode * 59 + this.CustomerGUID.GetHashCode();
                if (this.CaseTitle != null)
                    hashCode = hashCode * 59 + this.CaseTitle.GetHashCode();
                if (this.CaseDetails != null)
                    hashCode = hashCode * 59 + this.CaseDetails.GetHashCode();
                if (this.SystemAuthenticated != null)
                    hashCode = hashCode * 59 + this.SystemAuthenticated.GetHashCode();
                if (this.ManualVerification != null)
                    hashCode = hashCode * 59 + this.ManualVerification.GetHashCode();
                if (this.IPCCCallExtensionID != null)
                    hashCode = hashCode * 59 + this.IPCCCallExtensionID.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.CaseCategory1 != null)
                    hashCode = hashCode * 59 + this.CaseCategory1.GetHashCode();
                if (this.CaseCategory2 != null)
                    hashCode = hashCode * 59 + this.CaseCategory2.GetHashCode();
                if (this.CaseCategory3 != null)
                    hashCode = hashCode * 59 + this.CaseCategory3.GetHashCode();
                if (this.AdHocCriteria != null)
                    hashCode = hashCode * 59 + this.AdHocCriteria.GetHashCode();
                if (this.FollowupAction != null)
                    hashCode = hashCode * 59 + this.FollowupAction.GetHashCode();
                if (this.ContactMode != null)
                    hashCode = hashCode * 59 + this.ContactMode.GetHashCode();
                if (this.ModifiedBy != null)
                    hashCode = hashCode * 59 + this.ModifiedBy.GetHashCode();
                if (this.FollowupRequired != null)
                    hashCode = hashCode * 59 + this.FollowupRequired.GetHashCode();
                if (this.CaseStatus != null)
                    hashCode = hashCode * 59 + this.CaseStatus.GetHashCode();
                if (this.Resolution != null)
                    hashCode = hashCode * 59 + this.Resolution.GetHashCode();
                if (this.TriggeredFrom != null)
                    hashCode = hashCode * 59 + this.TriggeredFrom.GetHashCode();
                if (this.TriggeredBy != null)
                    hashCode = hashCode * 59 + this.TriggeredBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
