/* 
 * SPPL SVCS API 1.0 - Modified by Sache
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Westcon.CrmClient.Model;

namespace IO.Swagger.CrmClient.Model
{
    /// <summary>
    /// CreateCase
    /// </summary>
    [DataContract]
    public partial class CreateCase : IEquatable<CreateCase>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ContactMode
        /// </summary>
        [DataMember(Name = "ContactMode", EmitDefaultValue = false)]
        public ContactModeEnum ContactMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCase" /> class.
        /// </summary>
        /// <param name="customerGUID">customerGUID (required).</param>
        /// <param name="caseTitle">caseTitle (required).</param>
        /// <param name="caseDetails">caseDetails (required).</param>
        /// <param name="systemAuthenticated">systemAuthenticated (required).</param>
        /// <param name="dateTimeReceived">dateTimeReceived (required).</param>
        /// <param name="iPCCCallExtensionID">iPCCCallExtensionID (required).</param>
        /// <param name="primaryCaseOfficer">primaryCaseOfficer (required).</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="caseCategory1">caseCategory1 (required).</param>
        /// <param name="caseCategory2">caseCategory2 (required).</param>
        /// <param name="caseCategory3">caseCategory3 (required).</param>
        /// <param name="contactMode">contactMode (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        /// <param name="createdOn">createdOn (required).</param>
        /// <param name="modifiedBy">modifiedBy (required).</param>
        /// <param name="callBack">callBack (required).</param>
        /// <param name="triggeredFrom">triggeredFrom (required).</param>
        /// <param name="triggeredBy">triggeredBy (required).</param>
        public CreateCase(Guid? customerGUID = default(Guid?), string caseTitle = default(string), string caseDetails = default(string), bool? systemAuthenticated = default(bool?), string dateTimeReceived = default(string), string iPCCCallExtensionID = default(string), string primaryCaseOfficer = default(string), string owner = default(string), Guid? caseCategory1 = default(Guid?), Guid? caseCategory2 = default(Guid?), Guid? caseCategory3 = default(Guid?), ContactModeEnum contactMode = default(ContactModeEnum), string createdBy = default(string), string createdOn = default(string), string modifiedBy = default(string), bool? callBack = default(bool?), string triggeredFrom = default(string), string triggeredBy = default(string))
        {
            // to ensure "customerGUID" is required (not null)
            if (customerGUID == null)
            {
                throw new InvalidDataException("customerGUID is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CustomerGUID = customerGUID;
            }
            // to ensure "caseTitle" is required (not null)
            if (caseTitle == null)
            {
                throw new InvalidDataException("caseTitle is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CaseTitle = caseTitle;
            }
            // to ensure "caseDetails" is required (not null)
            if (caseDetails == null)
            {
                throw new InvalidDataException("caseDetails is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CaseDetails = caseDetails;
            }
            // to ensure "systemAuthenticated" is required (not null)
            if (systemAuthenticated == null)
            {
                throw new InvalidDataException("systemAuthenticated is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.SystemAuthenticated = systemAuthenticated;
            }
            // to ensure "dateTimeReceived" is required (not null)
            if (dateTimeReceived == null)
            {
                throw new InvalidDataException("dateTimeReceived is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.DateTimeReceived = dateTimeReceived;
            }
            // to ensure "iPCCCallExtensionID" is required (not null)
            if (iPCCCallExtensionID == null)
            {
                throw new InvalidDataException("iPCCCallExtensionID is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.IPCCCallExtensionID = iPCCCallExtensionID;
            }
            // to ensure "primaryCaseOfficer" is required (not null)
            if (primaryCaseOfficer == null)
            {
                throw new InvalidDataException("primaryCaseOfficer is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.PrimaryCaseOfficer = primaryCaseOfficer;
            }
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new InvalidDataException("owner is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.Owner = owner;
            }
            // to ensure "caseCategory1" is required (not null)
            if (caseCategory1 == null)
            {
                throw new InvalidDataException("caseCategory1 is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CaseCategory1 = caseCategory1;
            }
            // to ensure "caseCategory2" is required (not null)
            if (caseCategory2 == null)
            {
                throw new InvalidDataException("caseCategory2 is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CaseCategory2 = caseCategory2;
            }
            // to ensure "caseCategory3" is required (not null)
            if (caseCategory3 == null)
            {
                throw new InvalidDataException("caseCategory3 is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CaseCategory3 = caseCategory3;
            }
            // to ensure "contactMode" is required (not null)
            if (contactMode == null || contactMode == 0)
            {
                throw new InvalidDataException("contactMode is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.ContactMode = contactMode;
            }
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new InvalidDataException("createdBy is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CreatedBy = createdBy;
            }
            // to ensure "createdOn" is required (not null)
            if (createdOn == null)
            {
                throw new InvalidDataException("createdOn is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CreatedOn = createdOn;
            }
            // to ensure "modifiedBy" is required (not null)
            if (modifiedBy == null)
            {
                throw new InvalidDataException("modifiedBy is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.ModifiedBy = modifiedBy;
            }
            // to ensure "callBack" is required (not null)
            if (callBack == null)
            {
                throw new InvalidDataException("callBack is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.CallBack = callBack;
            }
            // to ensure "triggeredFrom" is required (not null)
            if (triggeredFrom == null)
            {
                throw new InvalidDataException("triggeredFrom is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.TriggeredFrom = triggeredFrom;
            }
            // to ensure "triggeredBy" is required (not null)
            if (triggeredBy == null)
            {
                throw new InvalidDataException("triggeredBy is a required property for CreateCase and cannot be null");
            }
            else
            {
                this.TriggeredBy = triggeredBy;
            }
        }

        /// <summary>
        /// Gets or Sets CustomerGUID
        /// </summary>
        [DataMember(Name = "CustomerGUID", EmitDefaultValue = false)]
        public Guid? CustomerGUID { get; set; }

        /// <summary>
        /// Gets or Sets CaseTitle
        /// </summary>
        [DataMember(Name = "CaseTitle", EmitDefaultValue = false)]
        public string CaseTitle { get; set; }

        /// <summary>
        /// Gets or Sets CaseDetails
        /// </summary>
        [DataMember(Name = "CaseDetails", EmitDefaultValue = false)]
        public string CaseDetails { get; set; }

        /// <summary>
        /// Gets or Sets SystemAuthenticated
        /// </summary>
        [DataMember(Name = "SystemAuthenticated", EmitDefaultValue = false)]
        public bool? SystemAuthenticated { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeReceived
        /// </summary>
        [DataMember(Name = "DateTimeReceived", EmitDefaultValue = false)]
        public string DateTimeReceived { get; set; }

        /// <summary>
        /// Gets or Sets IPCCCallExtensionID
        /// </summary>
        [DataMember(Name = "IPCCCallExtensionID", EmitDefaultValue = false)]
        public string IPCCCallExtensionID { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryCaseOfficer
        /// </summary>
        [DataMember(Name = "PrimaryCaseOfficer", EmitDefaultValue = false)]
        public string PrimaryCaseOfficer { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "Owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets CaseCategory1
        /// </summary>
        [DataMember(Name = "CaseCategory1", EmitDefaultValue = false)]
        public Guid? CaseCategory1 { get; set; }

        /// <summary>
        /// Gets or Sets CaseCategory2
        /// </summary>
        [DataMember(Name = "CaseCategory2", EmitDefaultValue = false)]
        public Guid? CaseCategory2 { get; set; }

        /// <summary>
        /// Gets or Sets CaseCategory3
        /// </summary>
        [DataMember(Name = "CaseCategory3", EmitDefaultValue = false)]
        public Guid? CaseCategory3 { get; set; }


        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "CreatedOn", EmitDefaultValue = false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name = "ModifiedBy", EmitDefaultValue = false)]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets CallBack
        /// </summary>
        [DataMember(Name = "CallBack", EmitDefaultValue = false)]
        public bool? CallBack { get; set; }

        /// <summary>
        /// Gets or Sets TriggeredFrom
        /// </summary>
        [DataMember(Name = "TriggeredFrom", EmitDefaultValue = false)]
        public string TriggeredFrom { get; set; }

        /// <summary>
        /// Gets or Sets TriggeredBy
        /// </summary>
        [DataMember(Name = "TriggeredBy", EmitDefaultValue = false)]
        public string TriggeredBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCase {\n");
            sb.Append("  CustomerGUID: ").Append(CustomerGUID).Append("\n");
            sb.Append("  CaseTitle: ").Append(CaseTitle).Append("\n");
            sb.Append("  CaseDetails: ").Append(CaseDetails).Append("\n");
            sb.Append("  SystemAuthenticated: ").Append(SystemAuthenticated).Append("\n");
            sb.Append("  DateTimeReceived: ").Append(DateTimeReceived).Append("\n");
            sb.Append("  IPCCCallExtensionID: ").Append(IPCCCallExtensionID).Append("\n");
            sb.Append("  PrimaryCaseOfficer: ").Append(PrimaryCaseOfficer).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  CaseCategory1: ").Append(CaseCategory1).Append("\n");
            sb.Append("  CaseCategory2: ").Append(CaseCategory2).Append("\n");
            sb.Append("  CaseCategory3: ").Append(CaseCategory3).Append("\n");
            sb.Append("  ContactMode: ").Append(ContactMode).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  CallBack: ").Append(CallBack).Append("\n");
            sb.Append("  TriggeredFrom: ").Append(TriggeredFrom).Append("\n");
            sb.Append("  TriggeredBy: ").Append(TriggeredBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCase);
        }

        /// <summary>
        /// Returns true if CreateCase instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCase input)
        {
            if (input == null)
                return false;

            return
                (
                    this.CustomerGUID == input.CustomerGUID ||
                    (this.CustomerGUID != null &&
                    this.CustomerGUID.Equals(input.CustomerGUID))
                ) &&
                (
                    this.CaseTitle == input.CaseTitle ||
                    (this.CaseTitle != null &&
                    this.CaseTitle.Equals(input.CaseTitle))
                ) &&
                (
                    this.CaseDetails == input.CaseDetails ||
                    (this.CaseDetails != null &&
                    this.CaseDetails.Equals(input.CaseDetails))
                ) &&
                (
                    this.SystemAuthenticated == input.SystemAuthenticated ||
                    (this.SystemAuthenticated != null &&
                    this.SystemAuthenticated.Equals(input.SystemAuthenticated))
                ) &&
                (
                    this.DateTimeReceived == input.DateTimeReceived ||
                    (this.DateTimeReceived != null &&
                    this.DateTimeReceived.Equals(input.DateTimeReceived))
                ) &&
                (
                    this.IPCCCallExtensionID == input.IPCCCallExtensionID ||
                    (this.IPCCCallExtensionID != null &&
                    this.IPCCCallExtensionID.Equals(input.IPCCCallExtensionID))
                ) &&
                (
                    this.PrimaryCaseOfficer == input.PrimaryCaseOfficer ||
                    (this.PrimaryCaseOfficer != null &&
                    this.PrimaryCaseOfficer.Equals(input.PrimaryCaseOfficer))
                ) &&
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) &&
                (
                    this.CaseCategory1 == input.CaseCategory1 ||
                    (this.CaseCategory1 != null &&
                    this.CaseCategory1.Equals(input.CaseCategory1))
                ) &&
                (
                    this.CaseCategory2 == input.CaseCategory2 ||
                    (this.CaseCategory2 != null &&
                    this.CaseCategory2.Equals(input.CaseCategory2))
                ) &&
                (
                    this.CaseCategory3 == input.CaseCategory3 ||
                    (this.CaseCategory3 != null &&
                    this.CaseCategory3.Equals(input.CaseCategory3))
                ) &&
                (
                    this.ContactMode == input.ContactMode ||
                    (this.ContactMode != null &&
                    this.ContactMode.Equals(input.ContactMode))
                ) &&
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) &&
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) &&
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    (this.ModifiedBy != null &&
                    this.ModifiedBy.Equals(input.ModifiedBy))
                ) &&
                (
                    this.CallBack == input.CallBack ||
                    (this.CallBack != null &&
                    this.CallBack.Equals(input.CallBack))
                ) &&
                (
                    this.TriggeredFrom == input.TriggeredFrom ||
                    (this.TriggeredFrom != null &&
                    this.TriggeredFrom.Equals(input.TriggeredFrom))
                ) &&
                (
                    this.TriggeredBy == input.TriggeredBy ||
                    (this.TriggeredBy != null &&
                    this.TriggeredBy.Equals(input.TriggeredBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerGUID != null)
                    hashCode = hashCode * 59 + this.CustomerGUID.GetHashCode();
                if (this.CaseTitle != null)
                    hashCode = hashCode * 59 + this.CaseTitle.GetHashCode();
                if (this.CaseDetails != null)
                    hashCode = hashCode * 59 + this.CaseDetails.GetHashCode();
                if (this.SystemAuthenticated != null)
                    hashCode = hashCode * 59 + this.SystemAuthenticated.GetHashCode();
                if (this.DateTimeReceived != null)
                    hashCode = hashCode * 59 + this.DateTimeReceived.GetHashCode();
                if (this.IPCCCallExtensionID != null)
                    hashCode = hashCode * 59 + this.IPCCCallExtensionID.GetHashCode();
                if (this.PrimaryCaseOfficer != null)
                    hashCode = hashCode * 59 + this.PrimaryCaseOfficer.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.CaseCategory1 != null)
                    hashCode = hashCode * 59 + this.CaseCategory1.GetHashCode();
                if (this.CaseCategory2 != null)
                    hashCode = hashCode * 59 + this.CaseCategory2.GetHashCode();
                if (this.CaseCategory3 != null)
                    hashCode = hashCode * 59 + this.CaseCategory3.GetHashCode();
                if (this.ContactMode != null)
                    hashCode = hashCode * 59 + this.ContactMode.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.ModifiedBy != null)
                    hashCode = hashCode * 59 + this.ModifiedBy.GetHashCode();
                if (this.CallBack != null)
                    hashCode = hashCode * 59 + this.CallBack.GetHashCode();
                if (this.TriggeredFrom != null)
                    hashCode = hashCode * 59 + this.TriggeredFrom.GetHashCode();
                if (this.TriggeredBy != null)
                    hashCode = hashCode * 59 + this.TriggeredBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
