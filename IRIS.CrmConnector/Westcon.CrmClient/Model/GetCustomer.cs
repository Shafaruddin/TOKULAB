/* 
 * SPPL SVCS API 1.0 - Modified by Sache
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Westcon.CrmClient.Model;

namespace IO.Swagger.CrmClient.Model
{
    /// <summary>
    /// GetCustomer
    /// </summary>
    [DataContract]
    public partial class GetCustomer : HasTriggerInformation, IEquatable<GetCustomer>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DataSet
        /// </summary>
        [DataMember(Name = "DataSet", EmitDefaultValue = false)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DataSetEnum DataSet { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomer" /> class.
        /// </summary>
        /// <param name="iDNumber">iDNumber.</param>
        /// <param name="customerGUID">customerGUID.</param>
        /// <param name="sPAAccountNumber">sPAAccountNumber.</param>
        /// <param name="anonymous">anonymous.</param>
        /// <param name="dataSet">dataSet (required).</param>
        /// <param name="triggeredFrom">triggeredFrom (required).</param>
        /// <param name="triggeredBy">triggeredBy (required).</param>
        public GetCustomer(string iDNumber = default(string), Guid? customerGUID = default(Guid?), string sPAAccountNumber = default(string), bool? anonymous = default(bool?), DataSetEnum dataSet = default(DataSetEnum), string triggeredFrom = default(string), string triggeredBy = default(string))
        {
            // to ensure "dataSet" is required (not null)
            if (dataSet == null || dataSet == 0)
            {
                throw new InvalidDataException("dataSet is a required property for GetCustomer and cannot be null");
            }
            else
            {
                this.DataSet = dataSet;
            }
            // to ensure "triggeredFrom" is required (not null)
            if (triggeredFrom == null)
            {
                throw new InvalidDataException("triggeredFrom is a required property for GetCustomer and cannot be null");
            }
            else
            {
                this.TriggeredFrom = triggeredFrom;
            }
            // to ensure "triggeredBy" is required (not null)
            if (triggeredBy == null)
            {
                throw new InvalidDataException("triggeredBy is a required property for GetCustomer and cannot be null");
            }
            else
            {
                this.TriggeredBy = triggeredBy;
            }
            this.IDNumber = iDNumber;
            this.CustomerGUID = customerGUID;
            this.SPAAccountNumber = sPAAccountNumber;
            this.Anonymous = anonymous;
        }

        /// <summary>
        /// Gets or Sets IDNumber
        /// </summary>
        [DataMember(Name = "IDNumber", EmitDefaultValue = false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Include)]
        public string IDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomerGUID
        /// </summary>
        [DataMember(Name = "CustomerGUID", EmitDefaultValue = false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Include)]
        public Guid? CustomerGUID { get; set; }

        /// <summary>
        /// Gets or Sets SPAAccountNumber
        /// </summary>
        [DataMember(Name = "SPAAccountNumber", EmitDefaultValue = false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Include)]
        public string SPAAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets Anonymous
        /// </summary>
        [DataMember(Name = "Anonymous", EmitDefaultValue = false)]
        [JsonProperty(NullValueHandling = NullValueHandling.Include)]
        public bool? Anonymous { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCustomer {\n");
            sb.Append("  IDNumber: ").Append(IDNumber).Append("\n");
            sb.Append("  CustomerGUID: ").Append(CustomerGUID).Append("\n");
            sb.Append("  SPAAccountNumber: ").Append(SPAAccountNumber).Append("\n");
            sb.Append("  Anonymous: ").Append(Anonymous).Append("\n");
            sb.Append("  DataSet: ").Append(DataSet).Append("\n");
            sb.Append("  TriggeredFrom: ").Append(TriggeredFrom).Append("\n");
            sb.Append("  TriggeredBy: ").Append(TriggeredBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCustomer);
        }

        /// <summary>
        /// Returns true if GetCustomer instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCustomer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCustomer input)
        {
            if (input == null)
                return false;

            return
                (
                    this.IDNumber == input.IDNumber ||
                    (this.IDNumber != null &&
                    this.IDNumber.Equals(input.IDNumber))
                ) &&
                (
                    this.CustomerGUID == input.CustomerGUID ||
                    (this.CustomerGUID != null &&
                    this.CustomerGUID.Equals(input.CustomerGUID))
                ) &&
                (
                    this.SPAAccountNumber == input.SPAAccountNumber ||
                    (this.SPAAccountNumber != null &&
                    this.SPAAccountNumber.Equals(input.SPAAccountNumber))
                ) &&
                (
                    this.Anonymous == input.Anonymous ||
                    (this.Anonymous != null &&
                    this.Anonymous.Equals(input.Anonymous))
                ) &&
                (
                    this.DataSet == input.DataSet ||
                    (this.DataSet != null &&
                    this.DataSet.Equals(input.DataSet))
                ) &&
                (
                    this.TriggeredFrom == input.TriggeredFrom ||
                    (this.TriggeredFrom != null &&
                    this.TriggeredFrom.Equals(input.TriggeredFrom))
                ) &&
                (
                    this.TriggeredBy == input.TriggeredBy ||
                    (this.TriggeredBy != null &&
                    this.TriggeredBy.Equals(input.TriggeredBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IDNumber != null)
                    hashCode = hashCode * 59 + this.IDNumber.GetHashCode();
                if (this.CustomerGUID != null)
                    hashCode = hashCode * 59 + this.CustomerGUID.GetHashCode();
                if (this.SPAAccountNumber != null)
                    hashCode = hashCode * 59 + this.SPAAccountNumber.GetHashCode();
                if (this.Anonymous != null)
                    hashCode = hashCode * 59 + this.Anonymous.GetHashCode();
                if (this.DataSet != null)
                    hashCode = hashCode * 59 + this.DataSet.GetHashCode();
                if (this.TriggeredFrom != null)
                    hashCode = hashCode * 59 + this.TriggeredFrom.GetHashCode();
                if (this.TriggeredBy != null)
                    hashCode = hashCode * 59 + this.TriggeredBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
