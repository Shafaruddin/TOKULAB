/* 
 * SPPL SVCS API 1.0 - Modified by Sache
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.ObjectModel;
using RestSharp;
using IO.Swagger.CrmClient.Client;
using IO.Swagger.CrmClient.Model;

namespace IO.Swagger.CrmClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SvcsirissitChallengeOTPPost (string xSource, ValidateOTP body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SvcsirissitChallengeOTPPostWithHttpInfo (string xSource, ValidateOTP body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SvcsirissitCreateCasePost (string xSource, CreateCase body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SvcsirissitCreateCasePostWithHttpInfo (string xSource, CreateCase body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SvcsirissitFindCustomerPost (string xSource, FindCustomer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SvcsirissitFindCustomerPostWithHttpInfo (string xSource, FindCustomer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SvcsirissitGenerateOTPPost (string xSource, GenerateOTP body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SvcsirissitGenerateOTPPostWithHttpInfo (string xSource, GenerateOTP body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SvcsirissitGetCaseAndActivitiesHistoryPost (string xSource, GetCaseAndActivitiesHistory body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SvcsirissitGetCaseAndActivitiesHistoryPostWithHttpInfo (string xSource, GetCaseAndActivitiesHistory body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <returns></returns>
        void SvcsirissitGetCategoryAndCriteriaGet (string xSource);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SvcsirissitGetCategoryAndCriteriaGetWithHttpInfo (string xSource);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SvcsirissitGetCustomerPost (string xSource, GetCustomer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SvcsirissitGetCustomerPostWithHttpInfo (string xSource, GetCustomer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SvcsirissitUpdateCasePost (string xSource, UpdateCase body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SvcsirissitUpdateCasePostWithHttpInfo (string xSource, UpdateCase body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SvcsirissitChallengeOTPPostAsync (string xSource, ValidateOTP body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitChallengeOTPPostAsyncWithHttpInfo (string xSource, ValidateOTP body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SvcsirissitCreateCasePostAsync (string xSource, CreateCase body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitCreateCasePostAsyncWithHttpInfo (string xSource, CreateCase body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SvcsirissitFindCustomerPostAsync (string xSource, FindCustomer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitFindCustomerPostAsyncWithHttpInfo (string xSource, FindCustomer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SvcsirissitGenerateOTPPostAsync (string xSource, GenerateOTP body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitGenerateOTPPostAsyncWithHttpInfo (string xSource, GenerateOTP body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SvcsirissitGetCaseAndActivitiesHistoryPostAsync (string xSource, GetCaseAndActivitiesHistory body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitGetCaseAndActivitiesHistoryPostAsyncWithHttpInfo (string xSource, GetCaseAndActivitiesHistory body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SvcsirissitGetCategoryAndCriteriaGetAsync (string xSource);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitGetCategoryAndCriteriaGetAsyncWithHttpInfo (string xSource);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SvcsirissitGetCustomerPostAsync (string xSource, GetCustomer body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitGetCustomerPostAsyncWithHttpInfo (string xSource, GetCustomer body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SvcsirissitUpdateCasePostAsync (string xSource, UpdateCase body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitUpdateCasePostAsyncWithHttpInfo (string xSource, UpdateCase body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.CrmClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.CrmClient.Client.Configuration()
            { 
                BasePath = basePath 
            };

            ExceptionFactory = IO.Swagger.CrmClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.CrmClient.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.CrmClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.CrmClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.CrmClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.CrmClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        //[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.CrmClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.CrmClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SvcsirissitChallengeOTPPost (string xSource, ValidateOTP body = null)
        {
             SvcsirissitChallengeOTPPostWithHttpInfo(xSource, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SvcsirissitChallengeOTPPostWithHttpInfo (string xSource, ValidateOTP body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitChallengeOTPPost");

            var localVarPath = "/svcsirissit/ChallengeOTP";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitChallengeOTPPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SvcsirissitChallengeOTPPostAsync (string xSource, ValidateOTP body = null)
        {
             await SvcsirissitChallengeOTPPostAsyncWithHttpInfo(xSource, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitChallengeOTPPostAsyncWithHttpInfo (string xSource, ValidateOTP body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitChallengeOTPPost");

            var localVarPath = "/svcsirissit/ChallengeOTP";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitChallengeOTPPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SvcsirissitCreateCasePost (string xSource, CreateCase body = null)
        {
             SvcsirissitCreateCasePostWithHttpInfo(xSource, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SvcsirissitCreateCasePostWithHttpInfo (string xSource, CreateCase body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitCreateCasePost");

            var localVarPath = "/svcsirissit/CreateCase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitCreateCasePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SvcsirissitCreateCasePostAsync (string xSource, CreateCase body = null)
        {
             await SvcsirissitCreateCasePostAsyncWithHttpInfo(xSource, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitCreateCasePostAsyncWithHttpInfo (string xSource, CreateCase body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitCreateCasePost");

            var localVarPath = "/svcsirissit/CreateCase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitCreateCasePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SvcsirissitFindCustomerPost (string xSource, FindCustomer body = null)
        {
             SvcsirissitFindCustomerPostWithHttpInfo(xSource, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SvcsirissitFindCustomerPostWithHttpInfo (string xSource, FindCustomer body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitFindCustomerPost");

            var localVarPath = "/svcsirissit/FindCustomer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitFindCustomerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SvcsirissitFindCustomerPostAsync (string xSource, FindCustomer body = null)
        {
             await SvcsirissitFindCustomerPostAsyncWithHttpInfo(xSource, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitFindCustomerPostAsyncWithHttpInfo (string xSource, FindCustomer body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitFindCustomerPost");

            var localVarPath = "/svcsirissit/FindCustomer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitFindCustomerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SvcsirissitGenerateOTPPost (string xSource, GenerateOTP body = null)
        {
             SvcsirissitGenerateOTPPostWithHttpInfo(xSource, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SvcsirissitGenerateOTPPostWithHttpInfo (string xSource, GenerateOTP body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitGenerateOTPPost");

            var localVarPath = "/svcsirissit/GenerateOTP";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitGenerateOTPPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SvcsirissitGenerateOTPPostAsync (string xSource, GenerateOTP body = null)
        {
             await SvcsirissitGenerateOTPPostAsyncWithHttpInfo(xSource, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitGenerateOTPPostAsyncWithHttpInfo (string xSource, GenerateOTP body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitGenerateOTPPost");

            var localVarPath = "/svcsirissit/GenerateOTP";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitGenerateOTPPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SvcsirissitGetCaseAndActivitiesHistoryPost (string xSource, GetCaseAndActivitiesHistory body = null)
        {
             SvcsirissitGetCaseAndActivitiesHistoryPostWithHttpInfo(xSource, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SvcsirissitGetCaseAndActivitiesHistoryPostWithHttpInfo (string xSource, GetCaseAndActivitiesHistory body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitGetCaseAndActivitiesHistoryPost");

            var localVarPath = "/svcsirissit/GetCaseAndActivitiesHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitGetCaseAndActivitiesHistoryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SvcsirissitGetCaseAndActivitiesHistoryPostAsync (string xSource, GetCaseAndActivitiesHistory body = null)
        {
             await SvcsirissitGetCaseAndActivitiesHistoryPostAsyncWithHttpInfo(xSource, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitGetCaseAndActivitiesHistoryPostAsyncWithHttpInfo (string xSource, GetCaseAndActivitiesHistory body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitGetCaseAndActivitiesHistoryPost");

            var localVarPath = "/svcsirissit/GetCaseAndActivitiesHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitGetCaseAndActivitiesHistoryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <returns></returns>
        public void SvcsirissitGetCategoryAndCriteriaGet (string xSource)
        {
             SvcsirissitGetCategoryAndCriteriaGetWithHttpInfo(xSource);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SvcsirissitGetCategoryAndCriteriaGetWithHttpInfo (string xSource)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitGetCategoryAndCriteriaGet");

            var localVarPath = "/svcsirissit/GetCategoryAndCriteria";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitGetCategoryAndCriteriaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SvcsirissitGetCategoryAndCriteriaGetAsync (string xSource)
        {
             await SvcsirissitGetCategoryAndCriteriaGetAsyncWithHttpInfo(xSource);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitGetCategoryAndCriteriaGetAsyncWithHttpInfo (string xSource)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitGetCategoryAndCriteriaGet");

            var localVarPath = "/svcsirissit/GetCategoryAndCriteria";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitGetCategoryAndCriteriaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SvcsirissitGetCustomerPost (string xSource, GetCustomer body = null)
        {
             SvcsirissitGetCustomerPostWithHttpInfo(xSource, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SvcsirissitGetCustomerPostWithHttpInfo (string xSource, GetCustomer body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitGetCustomerPost");

            var localVarPath = "/svcsirissit/GetCustomer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitGetCustomerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SvcsirissitGetCustomerPostAsync (string xSource, GetCustomer body = null)
        {
             await SvcsirissitGetCustomerPostAsyncWithHttpInfo(xSource, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitGetCustomerPostAsyncWithHttpInfo (string xSource, GetCustomer body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitGetCustomerPost");

            var localVarPath = "/svcsirissit/GetCustomer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitGetCustomerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SvcsirissitUpdateCasePost (string xSource, UpdateCase body = null)
        {
             SvcsirissitUpdateCasePostWithHttpInfo(xSource, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SvcsirissitUpdateCasePostWithHttpInfo (string xSource, UpdateCase body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitUpdateCasePost");

            var localVarPath = "/svcsirissit/UpdateCase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitUpdateCasePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SvcsirissitUpdateCasePostAsync (string xSource, UpdateCase body = null)
        {
             await SvcsirissitUpdateCasePostAsyncWithHttpInfo(xSource, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.CrmClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSource"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SvcsirissitUpdateCasePostAsyncWithHttpInfo (string xSource, UpdateCase body = null)
        {
            // verify the required parameter 'xSource' is set
            if (xSource == null)
                throw new ApiException(400, "Missing required parameter 'xSource' when calling DefaultApi->SvcsirissitUpdateCasePost");

            var localVarPath = "/svcsirissit/UpdateCase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSource != null) localVarHeaderParams.Add("X-Source", this.Configuration.ApiClient.ParameterToString(xSource)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SvcsirissitUpdateCasePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
